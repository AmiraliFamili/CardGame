In our first meeting we discussed for 1 hour regarding how to approach the game so that it would run with a round robin fashion 
after we started to work on the code separately we noticed that we should make the project in a way that players play the game 
simultaneously (in parallel) therefore we should have made a thread for each player and communicate among them ... 


what strategy we used for development : navigator / driver -> V model 
-- problem with synchronization and parallel : if everything is in a synchronized block is it running in parallel ? 
-- problem with round robin : how can players play simultaneously and the game is played in round robin fashion 
-- can we only use threads to make the project run in round robin ? 
-- what time slice should we use to avoid slow programs and avoid collisions 
-- why V model ? 


we should mention the problems we had i had to struggle with the main game class and extracting the correct 
    output from the main pack as well as making the entire game parallel in a round robin fashion and in a way that 
    their threads wouldn't interrupt each other and i had some problems with race condition as well, there was times when it was 
    a players turn but their left deck was empty and they had to wait for the shared resources to be freed (or filled) again so that 
    they could play their turn ... 

hey kaylum , please write some problems you had to face as both a designer and as a developer, i wrote some of mine as an example 
we have to start with the report as well as test methods we don't have much time left either.




when the game is played in two there is a chance that the game might get caught in an infinite loop when both player are looking for the same suite of cards to gather 
    (if there is only 4 cards of the same suit in the game)

since the game involves creating/ deleting and modifying files it should not be played with more than 1500-2000 players otherwise the game will crash 

when a winner is declared, all players will play once more (this couldn't be stopped with notifyAll method not synchronized blocks or run only once codes, anything but system.exit), and there is a slight possibility that the game might have two or
           more winners system.exit is used to prevent that from happening although it's not a professional method of ending the game but I couldn't find any other solution to this problem.

+ all the critical operation for threads is happening inside a synchronized block, however the game is being played in parallel. 



since the write end game method is looking for the winner hand inside players there shouldn't be two hand of the same cards declared as winner, 
although it should never happen since a player is declared as winner when they have 4 card of the same suit, their hand is basically unique 


